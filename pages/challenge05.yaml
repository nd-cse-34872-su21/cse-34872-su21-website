title:      "Challenge 05: Concurrent Events"
icon:       fa-code
navigation: []
internal:
external:
body:       |

    <img src="https://engineering.nd.edu/wp-content/uploads/2020/06/Bualuan-Ramzi-HS.2-300x300.jpg" class="pull-right img-rounded" width="200px">

    Our beloved [Ramzi] needs your help! As the [CSE] director of undergraduate
    studies, he is in charge with scheduling numerous classes, meetings, and
    events for the faculty, staff, and students of the department.  Given the
    **limited** amount of space the department has, it is often tricky to
    reserve the necessary classrooms or meeting spaces required for different
    events.

    One particular problem [Ramzi] has in scheduling events is determining how
    many rooms he actually needs when there are possibly **concurrent events**.
    That is, when there are multiple events with overlapping **time
    intervals**, it can be difficult for him to determine exactly how many
    rooms he actually needs to reserve.

    Therefore, he needs you to write a program that does the following:

    > Determine the **maximum number of concurrent events** given a series of
    **time intervals**.

    For instance, suppose he had to arrange meeting spaces for the following
    events:

    <table class="table table-striped table-bordered">
      <thead>
        <th>Event</th>
        <th>Start</th>
        <th>Stop</th>
      </thead>
      <tbody>
        <tr>
          <td>Operating System Principles</td>
          <td>1</td>
          <td>3</td>
        </tr>
        <tr>
          <td>Theory of Computing</td>
          <td>2</td>
          <td>4</td>
        </tr>
        <tr>
          <td>Computer Architecture</td>
          <td>3</td>
          <td>5</td>
        </tr>
        <tr>
          <td>Programming Paradigms</td>
          <td>4</td>
          <td>6</td>
        </tr>
      </tbody>
    </table>

    One way to solve this is by arranging the events graphically as shown below
    on the left.  Once laid out in this manner, it becomes clear that there are
    two times where there are a maximum of `3` events happening at once.
    Therefore [Ramzi] would have to reserve three rooms for these concurrent
    events.
    
    <div class="thumbnail">
    <img src="static/img/challenge05-concurrent-events.png" class="img-responsive">
    </div>

    <div class="alert alert-warning" markdown="1">
    #### <i class="fa fa-users"></i> Separate Rooms

    While it is tempting to schedule the same room for back-to-back events such
    as in the intervals `(1, 3)` and `(3, 5)`, as you all know, it takes some
    time for people to both enter and leave a room.  Therefore, events that
    **start** at the same time as another event **ends** would require a
    **separate room** to accommodate the flow of traffic.  That is why the test
    case on the left requires `3` rooms instead of `2`.

    </div>

    Because you are [CSE] students, however, [Ramzi] wants you to automate the
    process of determining the maximum number of concurrent events given a
    series of time intervals in softare and he wants you to make sure it runs
    in `O(nlogn)` time (*for each sequence of time intervals*).

    [Ramzi]: https://engineering.nd.edu/faculty/ramzi-bualuan/
    [CSE]:   https://cse.nd.edu

    ## Input

    You will be given a series of events in the following format:

        :::bash
        N             # Number of events
        Start1 Stop1  # Event 1 start and stop times
        ...
        StartN StopN  # Event 1 start and stop times

    That is, the first line contains `N` or the number of events in the test
    case, followed by `N` events which consist of a pair of start and stop
    times (integers).

    Here is an example input:

        ::text
        4
        1 3
        2 4
        3 5
        4 6
        4
        2 4
        1 5
        1 3
        2 6

    This input corresponds to the example described above with an additional
    test case depicted above on the right.

    ## Output

    For each test case, output the maximum number of concurrents for that test
    case as shown in the sample output below:

        ::text
        1. Maximum number of concurrent events is 3
        2. Maximum number of concurrent events is 4

    Be sure to prefix each line of output with the test case number (starting
    with `1`).

    <div class="alert alert-info" markdown="1">
    #### <i class="fa fa-lightbulb-o"></i> Programming Challenges

    This problem is inspired by "Problem 14.5" in [Elements of Programming
    Interviews].

    </div>

    [Elements of Programming Interviews]:   http://elementsofprogramminginterviews.com/

    ## Submission

    To submit your work, follow the same procedure you used for [Reading 01]:

        :::bash
        $ cd path/to/cse-34872-su21-assignments     # Go to assignments repository
        $ git checkout master                       # Make sure we are on master
        $ git pull --rebase                         # Pull any changes from GitHub

        $ git checkout -b challenge05               # Create and checkout challenge05 branch

        $ $EDITOR challenge05/program.cpp           # Edit your code

        $ git add challenge05/program.cpp           # Stage your changes
        $ git commit -m "challenge05: done"         # Commit your changes

        $ git push -u origin challenge05            # Send changes to GitHub

    To check your code, you can use the `.scripts/check.py` script or [curl]:

        :::bash
        $ .scripts/check.py
        Checking challenge05 program.cpp ...
          Result Success
            Time 0.16
           Score 6.00 / 6.00

        $ curl -F source=@challenge05/program.cpp https://dredd.h4x0r.space/code/cse-34872-su21/challenge05
        {"result": "Success", "score": 6, "time": 0.16451787948608398, "value": 6, "status": 0}

    <div class="alert alert-success" markdown="1">
    #### <i class="fa fa-github"></i> Pull Request

    Once you have commited your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the **teaching assistant**.
    </div>

    [GitHub]:           https://github.com
    [HackerRank]:       https://www.hackerrank.com
    [LeetCode]:         https://leetcode.com
    [Reading 01]:       reading01.html
    [curl]:             https://curl.haxx.se/
