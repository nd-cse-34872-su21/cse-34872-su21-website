title:      "Challenge 20: Hamiltonian Cycle"
icon:       fa-code
navigation: []
internal:
external:
body:       |

    [Alexander Hamilton] needs your help.  He needs to ride around the country
    and rally the troops, because:

    > The plan is to fan this spark into a flame.

    Though frustrated by the lack of resources provided by the [Continental
    Congress], Hamilton believes:

    > I'm just like my country - I'm young, scrappy, and hungry, and I am not
    throwing away my shot.

    <div class="thumbnail text-center">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/Ic7NqP_YGlg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>

    Undeterred by the might of the British empire, he confidently proclaims:

    > I may not live to see our glory, but I will gladly join the fight. And
    when our children tell our story, they’ll tell the story of tonight.

    <div class="thumbnail text-center">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/3vqwrepaMR0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>

    Help Hamilton in his fight against the dreaded red coats by **charting a
    path** through a set of checkpoints such that he only visits each
    checkpoint **once** and that he returns from where he started (ie.
    **completes a cycle**).

    Hurry, there is no time to waste! This is your shot! After all:

    > When you got skin in the game, you stay in the game. But you don’t get a
    win unless you play in the game. Oh, you get love for it. You get hate for
    it. You get nothing if you... Wait for it, wait for it, wait.

    <div class="thumbnail text-center">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/WySzEXKUSZw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>

    [Alexander Hamilton]:   https://en.wikipedia.org/wiki/Alexander_Hamilton
    [Continental Congress]: https://en.wikipedia.org/wiki/Continental_Congress

    ## Input

    The input will be a series of graphs in the following format:

        :::text
        N1
        Ui1 Uj1
        ...
        %
        N2
        Ui1 Uj1
        ...
        %

    Where `Ni` is the number of vertices (`0 < Ni < 256`) and `Uih Uil` are
    integers between `1` and `Ni` indicating that there exists an edge between
    vertex `Uih` and `Uil`.  Each graph is terminated with a `%`.

    ### Example Input

        :::text
        4
        1 2
        2 3
        2 4
        3 4
        3 1
        %
        6
        1 2
        1 3
        1 6
        3 2
        3 4
        5 2
        5 4
        6 5
        6 4
        %

    ## Output

    For each test case, output a line that must contain the sequence of
    vertices that form a [Hamiltonian cycle] in the form:

        :::text
        Ui1 Ui2 ...

    If no such path exists, then output:

        :::text
        None

    **Note:** To ensure consistent output, make sure you traverse the neighbors
    of a vertex in **sorted order**.

    [Hamiltonian cycle]: https://en.wikipedia.org/wiki/Hamiltonian_path

    ### Example Output

        :::text
        1 2 4 3 1
        1 2 3 4 5 6 1


    <div class="alert alert-danger" markdown="1">
    #### <i class="fa fa-balance-scale"></i> Algorithmic Complexity
    For each input test case, your solution should have the following targets:

    <table class="table table-striped table-bordered" style="background-color: white" markdown="1">
      <tbody>
        <tr>
          <td>**Time Complexity**</td>
          <td>`O(V!)`, where `V` is the number of vertices in the graph.</td>
        </tr>
        <tr>
          <td>**Space Complexity**</td>
          <td>`O(V)`, where `V` is the number of vertices in the graph.</td>
        </tr>
      </tbody>
    </table>

    Your solution may be below the targets, but it **should not exceed them**.

    </div>

    <div class="alert alert-info" markdown="1">
    #### <i class="fa fa-lightbulb-o"></i> Programming Challanges
    This is based on [775 - Hamiltonian Cycle] problem on the [UVa Online Judge].
    </div>

    [775 - Hamiltonian Cycle]: https://uva.onlinejudge.org/external/7/p775.pdf
    [UVa Online Judge]: https://uva.onlinejudge.org/

    ## Submission

    To submit your work, follow the same procedure you used for [Reading 01]:

        :::bash
        $ cd path/to/cse-34872-su21-assignments     # Go to assignments repository
        $ git checkout master                       # Make sure we are on master
        $ git pull --rebase                         # Pull any changes from GitHub

        $ git checkout -b challenge20               # Create and checkout challenge20 branch

        $ $EDITOR challenge20/program.cpp           # Edit your code

        $ git add challenge20/program.cpp           # Stage your changes
        $ git commit -m "challenge20: done"         # Commit your changes

        $ git push -u origin challenge20            # Send changes to GitHub

    To check your code, you can use the `.scripts/check.py` script or [curl]:

        :::bash
        $ .scripts/check.py
        Checking challenge20 program.cpp ...
          Result Success
            Time 0.03
           Score 6.00 / 6.00

        $ curl -F source=@challenge20/program.cpp https://dredd.h4x0r.space/code/cse-34872-su21/challenge20
        {"result": "Success", "score": 6, "time": 0.032061100006103516, "value": 6, "status": 0}

    <div class="alert alert-success" markdown="1">
    #### <i class="fa fa-github"></i> Pull Request

    Once you have commited your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the **teaching assistant**.
    </div>

    [GitHub]:           https://github.com
    [HackerRank]:       https://www.hackerrank.com
    [LeetCode]:         https://leetcode.com
    [Reading 01]:       reading01.html
    [curl]:             https://curl.haxx.se/
