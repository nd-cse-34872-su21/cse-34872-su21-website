title:      "Challenge 08: Masked Bits"
icon:       fa-code
navigation: []
internal:
external:
body:       |

    <img src="static/img/challenge08-joshi.jpg" class="pull-right img-rounded">

    Tanner and Josh[^1] are in the **Logic Design** lab helping [Siddharth]
    debug some finicky **FPGAs**.  To track down one of the errors in their
    circuit, they have to analyze a series of **bitstreams** (ie. **32-bit
    integers**) and count how many times a particular **mask** appears in each
    **bitstream**.

    For instance, given a **mask** of `1001` (ie. `9` in **hexadecimal**) and a
    **bitstream** of `10010010` (ie. `146` in **decimal**), then the **mask**
    occurs `2` times in the sequence of bits.

    Likewise, given a **mask** of `1111` (ie. `F` in **hexadecimal**) and a
    **bitstream** of `1111111` (ie. `127` in **decimal**), then the **mask**
    occurs `4` times in the sequence of bits.

    Both of these examples are demonstrated below.

    <div class="thumbnail">
    <img src="static/img/challenge08-masked-bits.png" class="img-responsive">
    </div>

    Unfortunately, since Tanner and Josh are **CPEGs**, software is not really
    their strong suit[^2].  Therefore, they want you to help them write a
    program that analyzes **bitstreams** and counts the number of times a
    **mask** appears in the sequence of bits.

    [Siddharth]: https://siddharth-joshi.com/
    [^1]: Winners of the [CSE 34872 Programming Challenges (Summer 2020)](https://www3.nd.edu/~pbui/teaching/cse.34872.su20) Programming Contest.
    [^2]: Not *really* true.  Some of the best programmers in the department are **CPEGs**.

    ## Input

    You will be given a series of masks and bitstreams in the form of a
    **hexadecimal** `mask` and **integer** `bitstream`:

    ### Example Input

        :::text
        9 146
        F 127

    <div class="alert alert-warning" markdown="1">
    **Note**: Each **integer** `bitstream` is a **32-bit integer**.
    </div>

    ## Output

    For each pair of `mask` and `bitstream`, computer the number of times the
    `mask` appears in the `bitstream` and then output a message in the following
    format:

    ### Example Output

        :::text
        1. 146 contains 0x9 2 times
        2. 127 contains 0xF 4 times

    ## Submission

    To submit your work, follow the same procedure you used for [Reading 01]:

        :::bash
        $ cd path/to/cse-34872-su21-assignments     # Go to assignments repository
        $ git checkout master                       # Make sure we are on master
        $ git pull --rebase                         # Pull any changes from GitHub

        $ git checkout -b challenge08               # Create and checkout challenge08 branch

        $ $EDITOR challenge08/program.cpp           # Edit your code

        $ git add challenge08/program.cpp           # Stage your changes
        $ git commit -m "challenge08: done"         # Commit your changes

        $ git push -u origin challenge08            # Send changes to GitHub

    To check your code, you can use the `.scripts/check.py` script or [curl]:

        :::bash
        $ .scripts/check.py
        Checking challenge08 program.cpp ...
          Result Success
            Time 0.41
           Score 6.00 / 6.00

        $ curl -F source=@challenge08/program.cpp https://dredd.h4x0r.space/code/cse-34872-su21/challenge08
        {"result": "Success", "score": 6, "time": 0.416405344009399414, "value": 6, "status": 0}

    <div class="alert alert-success" markdown="1">
    #### <i class="fa fa-github"></i> Pull Request

    Once you have commited your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the **teaching assistant**.
    </div>

    [GitHub]:           https://github.com
    [HackerRank]:       https://www.hackerrank.com
    [LeetCode]:         https://leetcode.com
    [Reading 01]:       reading01.html
    [curl]:             https://curl.haxx.se/
